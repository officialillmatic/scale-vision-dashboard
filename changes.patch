diff -ruN original/scale-vision-dashboard-main/.env scale-vision-dashboard-main/.env
--- original/scale-vision-dashboard-main/.env	2025-10-02 15:52:58.000000000 +0000
+++ scale-vision-dashboard-main/.env	2025-10-13 02:12:16.854653397 +0000
@@ -67,3 +67,10 @@
 VITE_SUPABASE_PUBLISHABLE_KEY="eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Impxa2tod295YmNlbnhxcHZvZGV2Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDc2MDk4MzksImV4cCI6MjA2MzE4NTgzOX0._CudusgLYlJEv_AkJNGpjavmZNTqxXy4lvAv4laAGd8"
 VITE_SUPABASE_URL="https://jqkkhwoybcenxqpvodev.supabase.co"
 VITE_SUPER_ADMIN_EMAILS="aiagentsdevelopers@gmail.com,produpublicol@gmail.com"
+
+# Uncomment and customise the following variables to configure super admin access.
+# You can specify a comma‑separated list of email addresses or user IDs. These
+# variables are optional; if left blank no super admins will be loaded from
+# environment variables. See `docs/ENVIRONMENT_SETUP.md` for details.
+# VITE_SUPER_ADMIN_EMAILS="founder@yourcompany.com,cto@yourcompany.com"
+# VITE_SUPER_ADMIN_IDS="53392e76-008c-4e46-8443-a6ebd6bd4504,0a1b2c3d-4e5f-6789-abcd-ef0123456789"
diff -ruN original/scale-vision-dashboard-main/docs/ENVIRONMENT_SETUP.md scale-vision-dashboard-main/docs/ENVIRONMENT_SETUP.md
--- original/scale-vision-dashboard-main/docs/ENVIRONMENT_SETUP.md	2025-10-02 15:52:58.000000000 +0000
+++ scale-vision-dashboard-main/docs/ENVIRONMENT_SETUP.md	2025-10-13 02:12:11.894665600 +0000
@@ -70,6 +70,22 @@
 - **Default**: `true`
 - **Requirements**: Requires Supabase email configuration
 
+## Super Admin Configuration
+
+#### `VITE_SUPER_ADMIN_EMAILS`
+* **Description**: A comma‑separated list of email addresses that should be granted **super‑admin** privileges in the dashboard. Super admins bypass normal company membership checks and have unrestricted access across all companies. You can list multiple emails separated by commas (without spaces).
+* **Where to set**: In your `.env` file under the front‑end environment variables. Only variables prefixed with `VITE_` will be available in client‑side code.
+* **Format**: `email1@example.com,email2@example.com`
+* **Example**: `VITE_SUPER_ADMIN_EMAILS=founder@yourcompany.com,cto@yourcompany.com`
+
+#### `VITE_SUPER_ADMIN_IDS`
+* **Description**: A comma‑separated list of Supabase user IDs (UUIDs) that should be granted **super‑admin** privileges. Use this when you know the user IDs but may not want to rely solely on email addresses. The IDs should match the values returned by Supabase’s `user.id` property.
+* **Where to set**: In your `.env` file. Only variables prefixed with `VITE_` will be exposed to the front‑end code.
+* **Format**: `uuid1,uuid2,uuid3`
+* **Example**: `VITE_SUPER_ADMIN_IDS=53392e76-008c-4e46-8443-a6ebd6bd4504,0a1b2c3d-4e5f-6789-abcd-ef0123456789`
+
+These variables are optional. If they are omitted or left empty, no super admins will be configured via environment variables, and you’ll need to rely on roles stored in Supabase’s `user_metadata` or `app_metadata`.
+
 ## Environment-Specific Setup
 
 ### Development Environment
diff -ruN original/scale-vision-dashboard-main/src/components/common/ErrorBoundary.tsx scale-vision-dashboard-main/src/components/common/ErrorBoundary.tsx
--- original/scale-vision-dashboard-main/src/components/common/ErrorBoundary.tsx	2025-10-02 15:52:58.000000000 +0000
+++ scale-vision-dashboard-main/src/components/common/ErrorBoundary.tsx	2025-10-13 02:17:28.485919027 +0000
@@ -1,5 +1,7 @@
 
 import React, { Component, ReactNode } from 'react';
+// Use centralised logger for error reporting
+import { error as logError } from '@/utils/logger';
 import { Alert, AlertDescription } from '@/components/ui/alert';
 import { Button } from '@/components/ui/button';
 import { AlertTriangle, RefreshCcw } from 'lucide-react';
@@ -25,7 +27,7 @@
   }
 
   componentDidCatch(error: Error, errorInfo: React.ErrorInfo) {
-    console.error('ErrorBoundary caught an error:', error, errorInfo);
+    logError('ErrorBoundary caught an error:', error, errorInfo);
   }
 
   handleReset = () => {
diff -ruN original/scale-vision-dashboard-main/src/components/common/GlobalErrorBoundary.tsx scale-vision-dashboard-main/src/components/common/GlobalErrorBoundary.tsx
--- original/scale-vision-dashboard-main/src/components/common/GlobalErrorBoundary.tsx	2025-10-02 15:52:58.000000000 +0000
+++ scale-vision-dashboard-main/src/components/common/GlobalErrorBoundary.tsx	2025-10-13 02:17:32.965907270 +0000
@@ -1,5 +1,7 @@
 
 import React, { Component, ErrorInfo, ReactNode } from 'react';
+// Use centralised logger for error reporting
+import { error as logError } from '@/utils/logger';
 import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
 import { Button } from '@/components/ui/button';
 import { AlertTriangle, RefreshCw } from 'lucide-react';
@@ -26,7 +28,7 @@
   }
 
   componentDidCatch(error: Error, errorInfo: ErrorInfo) {
-    console.error('GlobalErrorBoundary caught an error:', error, errorInfo);
+    logError('GlobalErrorBoundary caught an error:', error, errorInfo);
     this.setState({ error, errorInfo });
   }
 
diff -ruN original/scale-vision-dashboard-main/src/components/team-new/AssignAgentModal.tsx scale-vision-dashboard-main/src/components/team-new/AssignAgentModal.tsx
--- original/scale-vision-dashboard-main/src/components/team-new/AssignAgentModal.tsx	1970-01-01 00:00:00.000000000 +0000
+++ scale-vision-dashboard-main/src/components/team-new/AssignAgentModal.tsx	2025-10-13 02:19:08.801788824 +0000
@@ -0,0 +1,155 @@
+import React, { useState } from 'react';
+import {
+  Dialog,
+  DialogContent,
+  DialogDescription,
+  DialogFooter,
+  DialogHeader,
+  DialogTitle,
+} from '@/components/ui/dialog';
+import { Button } from '@/components/ui/button';
+import { Input } from '@/components/ui/input';
+import { Label } from '@/components/ui/label';
+import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
+import { Alert, AlertDescription } from '@/components/ui/alert';
+import { AlertTriangle, Users } from 'lucide-react';
+import { assignAgentToUser } from '@/services/agent/agentMutations';
+import { Agent } from '@/services/agentService';
+
+interface AssignAgentModalProps {
+  isOpen: boolean;
+  agent: Agent | null;
+  defaultCompanyId?: string;
+  onClose: () => void;
+  onSuccess: () => void;
+}
+
+/**
+ * Modal for assigning a custom AI agent to a user. It prompts for the user ID
+ * (and optionally company ID) and allows setting the assignment as the
+ * user’s primary agent. On submit it calls the `assignAgentToUser` service.
+ */
+export function AssignAgentModal({ isOpen, agent, defaultCompanyId, onClose, onSuccess }: AssignAgentModalProps) {
+  const [userId, setUserId] = useState('');
+  const [companyId, setCompanyId] = useState(defaultCompanyId || '');
+  const [isPrimary, setIsPrimary] = useState(false);
+  const [error, setError] = useState<string | null>(null);
+  const [isAssigning, setIsAssigning] = useState(false);
+
+  const handleSubmit = async (e: React.FormEvent) => {
+    e.preventDefault();
+    if (!agent) return;
+    setError(null);
+
+    if (!userId.trim()) {
+      setError('User ID is required');
+      return;
+    }
+
+    setIsAssigning(true);
+    try {
+      const newAssignment = await assignAgentToUser({
+        user_id: userId.trim(),
+        agent_id: agent.id,
+        company_id: companyId.trim() || undefined,
+        is_primary: isPrimary,
+      });
+      if (!newAssignment) {
+        throw new Error('Assignment could not be created');
+      }
+      onSuccess();
+      // Reset fields after successful assignment
+      setUserId('');
+      setCompanyId(defaultCompanyId || '');
+      setIsPrimary(false);
+    } catch (err: any) {
+      setError(err.message || 'Failed to assign agent');
+    } finally {
+      setIsAssigning(false);
+    }
+  };
+
+  const handleClose = () => {
+    if (!isAssigning) {
+      setError(null);
+      onClose();
+    }
+  };
+
+  return (
+    <Dialog open={isOpen} onOpenChange={handleClose}>
+      <DialogContent className="sm:max-w-[600px]">
+        <form onSubmit={handleSubmit}>
+          <DialogHeader>
+            <DialogTitle className="flex items-center gap-2">
+              <Users className="h-5 w-5" />
+              Assign Agent
+            </DialogTitle>
+            <DialogDescription>
+              Specify the user ID (and optional company ID) to assign this agent. You can also mark the
+              agent as primary for the user.
+            </DialogDescription>
+          </DialogHeader>
+
+          <div className="grid gap-6 py-4">
+            {error && (
+              <Alert variant="destructive">
+                <AlertTriangle className="h-4 w-4" />
+                <AlertDescription>{error}</AlertDescription>
+              </Alert>
+            )}
+
+            <div className="space-y-2">
+              <Label htmlFor="assign-user">User ID *</Label>
+              <Input
+                id="assign-user"
+                value={userId}
+                onChange={(e) => setUserId(e.target.value)}
+                disabled={isAssigning}
+              />
+            </div>
+
+            <div className="space-y-2">
+              <Label htmlFor="assign-company">Company ID (optional)</Label>
+              <Input
+                id="assign-company"
+                value={companyId}
+                onChange={(e) => setCompanyId(e.target.value)}
+                disabled={isAssigning}
+              />
+            </div>
+
+            <div className="space-y-2">
+              <Label>Set as Primary?</Label>
+              <Select
+                value={isPrimary ? 'yes' : 'no'}
+                onValueChange={(val: 'yes' | 'no') => setIsPrimary(val === 'yes')}
+                disabled={isAssigning}
+              >
+                <SelectTrigger>
+                  <SelectValue />
+                </SelectTrigger>
+                <SelectContent>
+                  <SelectItem value="no">No</SelectItem>
+                  <SelectItem value="yes">Yes</SelectItem>
+                </SelectContent>
+              </Select>
+            </div>
+          </div>
+
+          <DialogFooter>
+            <Button type="button" variant="outline" onClick={handleClose} disabled={isAssigning}>
+              Cancel
+            </Button>
+            <Button
+              type="submit"
+              disabled={isAssigning || !userId.trim()}
+            >
+              {isAssigning ? 'Assigning...' : 'Assign Agent'}
+            </Button>
+          </DialogFooter>
+        </form>
+      </DialogContent>
+    </Dialog>
+  );
+}
diff -ruN original/scale-vision-dashboard-main/src/components/team-new/AssignmentsManagementTable.tsx scale-vision-dashboard-main/src/components/team-new/AssignmentsManagementTable.tsx
--- original/scale-vision-dashboard-main/src/components/team-new/AssignmentsManagementTable.tsx	2025-10-02 15:52:58.000000000 +0000
+++ scale-vision-dashboard-main/src/components/team-new/AssignmentsManagementTable.tsx	2025-10-13 02:08:22.303006191 +0000
@@ -7,6 +7,11 @@
 import { DropdownMenu, DropdownMenuContent, DropdownMenuItem, DropdownMenuTrigger } from '@/components/ui/dropdown-menu';
 import { LoadingSpinner } from '@/components/common/LoadingSpinner';
 import { UserAgentAssignment } from '@/services/agent/userAgentAssignmentQueries';
+// Import service functions to update and remove assignments
+import {
+  updateUserAgentAssignmentPrimary,
+  removeUserAgentAssignment,
+} from '@/services/agent/userAgentAssignmentQueries';
 import { Users, MoreHorizontal, Trash2, Plus } from 'lucide-react';
 
 interface AssignmentsManagementTableProps {
@@ -18,21 +23,39 @@
 export function AssignmentsManagementTable({ assignments, isLoading, onRefresh }: AssignmentsManagementTableProps) {
   const [removingId, setRemovingId] = useState<string | null>(null);
 
-  const handleTogglePrimary = async (assignment: UserAgentAssignment, isPrimary: boolean) => {
+  const handleTogglePrimary = async (
+    assignment: UserAgentAssignment,
+    isPrimary: boolean,
+  ) => {
+    /*
+     * Toggle the primary assignment status for a user/agent relationship.
+     * When setting an assignment as primary, the service will unset other
+     * primary assignments for the same user. After updating, refresh
+     * the assignments list so the UI reflects the change.
+     */
     try {
-      // TODO: Implement toggle primary functionality
-      console.log('Toggle primary for assignment:', assignment.id, isPrimary);
+      await updateUserAgentAssignmentPrimary(
+        assignment.id,
+        isPrimary,
+        assignment.user_id,
+      );
+      onRefresh();
     } catch (error) {
       console.error('Failed to toggle primary status:', error);
     }
   };
 
   const handleRemoveAssignment = async (assignment: UserAgentAssignment) => {
+    /*
+     * Remove an existing user/agent assignment after confirming with the user.
+     * Delegates the deletion to the service function and refreshes the
+     * assignment list on success. Displays errors in the console if
+     * the deletion fails.
+     */
     if (window.confirm('Are you sure you want to remove this assignment?')) {
       setRemovingId(assignment.id);
       try {
-        // TODO: Implement remove functionality
-        console.log('Remove assignment:', assignment.id);
+        await removeUserAgentAssignment(assignment.id);
         onRefresh();
       } catch (error) {
         console.error('Failed to remove assignment:', error);
diff -ruN original/scale-vision-dashboard-main/src/components/team-new/CreateAgentModal.tsx scale-vision-dashboard-main/src/components/team-new/CreateAgentModal.tsx
--- original/scale-vision-dashboard-main/src/components/team-new/CreateAgentModal.tsx	2025-10-02 15:52:58.000000000 +0000
+++ scale-vision-dashboard-main/src/components/team-new/CreateAgentModal.tsx	2025-10-13 02:08:38.806960889 +0000
@@ -15,6 +15,8 @@
 import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
 import { Alert, AlertDescription } from "@/components/ui/alert";
 import { AlertTriangle, Bot } from "lucide-react";
+// Import mutation to create a new agent in Supabase
+import { createAgent } from '@/services/agent/agentMutations';
 
 interface CreateAgentModalProps {
   isOpen: boolean;
@@ -36,6 +38,7 @@
     e.preventDefault();
     setError(null);
 
+    // Basic form validation
     if (!formData.name.trim()) {
       setError('Agent name is required');
       return;
@@ -48,17 +51,24 @@
 
     setIsCreating(true);
     try {
-      // TODO: Implement agent creation
-      console.log('Creating agent:', formData);
-      
-      // Simulate API call
-      await new Promise(resolve => setTimeout(resolve, 1000));
-      
+      // Persist the new agent using the Supabase service
+      const newAgent = await createAgent({
+        name: formData.name.trim(),
+        description: formData.description.trim(),
+        status: formData.status,
+        rate_per_minute: parseFloat(formData.rate_per_minute),
+      });
+
+      if (!newAgent) {
+        throw new Error('Agent could not be created');
+      }
+
+      // Reset form and notify parent on success
       setFormData({
         name: '',
         description: '',
         status: 'active',
-        rate_per_minute: '0.02'
+        rate_per_minute: '0.02',
       });
       onSuccess();
     } catch (err: any) {
diff -ruN original/scale-vision-dashboard-main/src/components/team-new/CustomAgentsTable.tsx scale-vision-dashboard-main/src/components/team-new/CustomAgentsTable.tsx
--- original/scale-vision-dashboard-main/src/components/team-new/CustomAgentsTable.tsx	2025-10-02 15:52:58.000000000 +0000
+++ scale-vision-dashboard-main/src/components/team-new/CustomAgentsTable.tsx	2025-10-13 02:19:37.705783685 +0000
@@ -7,6 +7,10 @@
 import { LoadingSpinner } from '@/components/common/LoadingSpinner';
 import { Agent } from '@/services/agentService';
 import { formatCurrency } from '@/lib/utils';
+// Import agent mutation functions
+import { deleteAgent } from '@/services/agent/agentMutations';
+import { EditAgentModal } from './EditAgentModal';
+import { AssignAgentModal } from './AssignAgentModal';
 import { Bot, Edit, Trash2, MoreHorizontal, UserPlus } from 'lucide-react';
 
 interface CustomAgentsTableProps {
@@ -17,6 +21,10 @@
 
 export function CustomAgentsTable({ agents, isLoading, onRefresh }: CustomAgentsTableProps) {
   const [deletingId, setDeletingId] = useState<string | null>(null);
+  const [editingAgent, setEditingAgent] = useState<Agent | null>(null);
+  const [isEditModalOpen, setIsEditModalOpen] = useState(false);
+  const [assigningAgent, setAssigningAgent] = useState<Agent | null>(null);
+  const [isAssignModalOpen, setIsAssignModalOpen] = useState(false);
 
   const getStatusBadgeColor = (status: string) => {
     switch (status) {
@@ -32,16 +40,22 @@
   };
 
   const handleEdit = (agent: Agent) => {
-    // TODO: Implement edit functionality
-    console.log('Edit agent:', agent);
+    // Open the edit modal and set the selected agent
+    setEditingAgent(agent);
+    setIsEditModalOpen(true);
   };
 
   const handleDelete = async (agent: Agent) => {
+    /*
+     * Delete a custom agent from the database. Prompts the user for
+     * confirmation before performing the deletion, then uses the
+     * `deleteAgent` service to remove the agent. On success it calls
+     * `onRefresh` so the parent component can reload the list.
+     */
     if (window.confirm(`Are you sure you want to delete "${agent.name}"?`)) {
       setDeletingId(agent.id);
       try {
-        // TODO: Implement delete functionality
-        console.log('Delete agent:', agent);
+        await deleteAgent(agent.id);
         onRefresh();
       } catch (error) {
         console.error('Failed to delete agent:', error);
@@ -52,8 +66,9 @@
   };
 
   const handleAssign = (agent: Agent) => {
-    // TODO: Implement assignment functionality
-    console.log('Assign agent:', agent);
+    // Open the assign modal and set the selected agent
+    setAssigningAgent(agent);
+    setIsAssignModalOpen(true);
   };
 
   if (isLoading) {
@@ -160,6 +175,37 @@
           ))}
         </TableBody>
       </Table>
+      {/* Modals for editing and assigning agents */}
+      {editingAgent && (
+        <EditAgentModal
+          isOpen={isEditModalOpen}
+          agent={editingAgent}
+          onClose={() => {
+            setIsEditModalOpen(false);
+            setEditingAgent(null);
+          }}
+          onSuccess={() => {
+            setIsEditModalOpen(false);
+            setEditingAgent(null);
+            onRefresh();
+          }}
+        />
+      )}
+      {assigningAgent && (
+        <AssignAgentModal
+          isOpen={isAssignModalOpen}
+          agent={assigningAgent}
+          onClose={() => {
+            setIsAssignModalOpen(false);
+            setAssigningAgent(null);
+          }}
+          onSuccess={() => {
+            setIsAssignModalOpen(false);
+            setAssigningAgent(null);
+            onRefresh();
+          }}
+        />
+      )}
     </div>
   );
 }
diff -ruN original/scale-vision-dashboard-main/src/components/team-new/EditAgentModal.tsx scale-vision-dashboard-main/src/components/team-new/EditAgentModal.tsx
--- original/scale-vision-dashboard-main/src/components/team-new/EditAgentModal.tsx	1970-01-01 00:00:00.000000000 +0000
+++ scale-vision-dashboard-main/src/components/team-new/EditAgentModal.tsx	2025-10-13 02:18:50.485734335 +0000
@@ -0,0 +1,199 @@
+import React, { useState, useEffect } from 'react';
+import {
+  Dialog,
+  DialogContent,
+  DialogDescription,
+  DialogFooter,
+  DialogHeader,
+  DialogTitle,
+} from '@/components/ui/dialog';
+import { Button } from '@/components/ui/button';
+import { Input } from '@/components/ui/input';
+import { Label } from '@/components/ui/label';
+import { Textarea } from '@/components/ui/textarea';
+import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
+import { Alert, AlertDescription } from '@/components/ui/alert';
+import { AlertTriangle, Bot } from 'lucide-react';
+import { updateAgent } from '@/services/agent/agentMutations';
+import { Agent } from '@/services/agentService';
+
+interface EditAgentModalProps {
+  isOpen: boolean;
+  agent: Agent | null;
+  onClose: () => void;
+  onSuccess: () => void;
+}
+
+/**
+ * Modal for editing an existing custom AI agent. It pre‑populates the form
+ * fields with the provided agent’s current values and persists changes
+ * through the `updateAgent` service function. Errors are displayed inline.
+ */
+export function EditAgentModal({ isOpen, agent, onClose, onSuccess }: EditAgentModalProps) {
+  // Local form state mirrors the editable fields of the agent. When the
+  // modal opens or the agent prop changes, initialise the state.
+  const [formData, setFormData] = useState({
+    name: '',
+    description: '',
+    status: 'active' as 'active' | 'inactive' | 'maintenance',
+    rate_per_minute: '0.02'
+  });
+  const [error, setError] = useState<string | null>(null);
+  const [isUpdating, setIsUpdating] = useState(false);
+
+  useEffect(() => {
+    if (agent) {
+      setFormData({
+        name: agent.name || '',
+        description: agent.description || '',
+        status: (agent.status as 'active' | 'inactive' | 'maintenance') || 'active',
+        rate_per_minute: String(agent.rate_per_minute ?? 0.02)
+      });
+    }
+  }, [agent]);
+
+  const handleSubmit = async (e: React.FormEvent) => {
+    e.preventDefault();
+    if (!agent) return;
+    setError(null);
+
+    // Basic form validation
+    if (!formData.name.trim()) {
+      setError('Agent name is required');
+      return;
+    }
+    if (!formData.description.trim()) {
+      setError('Agent description is required');
+      return;
+    }
+    const rate = parseFloat(formData.rate_per_minute);
+    if (isNaN(rate) || rate < 0) {
+      setError('Rate must be a positive number');
+      return;
+    }
+
+    setIsUpdating(true);
+    try {
+      const updated = await updateAgent(agent.id, {
+        name: formData.name.trim(),
+        description: formData.description.trim(),
+        status: formData.status,
+        rate_per_minute: rate,
+      });
+      if (!updated) {
+        throw new Error('Agent could not be updated');
+      }
+      // Reset and notify parent
+      setError(null);
+      onSuccess();
+    } catch (err: any) {
+      setError(err.message || 'Failed to update agent');
+    } finally {
+      setIsUpdating(false);
+    }
+  };
+
+  const handleClose = () => {
+    if (!isUpdating) {
+      setError(null);
+      onClose();
+    }
+  };
+
+  return (
+    <Dialog open={isOpen} onOpenChange={handleClose}>
+      <DialogContent className="sm:max-w-[600px]">
+        <form onSubmit={handleSubmit}>
+          <DialogHeader>
+            <DialogTitle className="flex items-center gap-2">
+              <Bot className="h-5 w-5" />
+              Edit AI Agent
+            </DialogTitle>
+            <DialogDescription>
+              Modify the details of your custom AI agent below. All fields marked with * are required.
+            </DialogDescription>
+          </DialogHeader>
+
+          <div className="grid gap-6 py-4">
+            {error && (
+              <Alert variant="destructive">
+                <AlertTriangle className="h-4 w-4" />
+                <AlertDescription>{error}</AlertDescription>
+              </Alert>
+            )}
+
+            <div className="grid grid-cols-2 gap-4">
+              <div className="space-y-2">
+                <Label htmlFor="edit-name">Agent Name *</Label>
+                <Input
+                  id="edit-name"
+                  value={formData.name}
+                  onChange={(e) => setFormData(prev => ({ ...prev, name: e.target.value }))}
+                  disabled={isUpdating}
+                />
+              </div>
+
+              <div className="space-y-2">
+                <Label htmlFor="edit-status">Status</Label>
+                <Select
+                  value={formData.status}
+                  onValueChange={(value: 'active' | 'inactive' | 'maintenance') =>
+                    setFormData(prev => ({ ...prev, status: value }))
+                  }
+                  disabled={isUpdating}
+                >
+                  <SelectTrigger>
+                    <SelectValue />
+                  </SelectTrigger>
+                  <SelectContent>
+                    <SelectItem value="active">Active</SelectItem>
+                    <SelectItem value="inactive">Inactive</SelectItem>
+                    <SelectItem value="maintenance">Maintenance</SelectItem>
+                  </SelectContent>
+                </Select>
+              </div>
+            </div>
+
+            <div className="space-y-2">
+              <Label htmlFor="edit-description">Description *</Label>
+              <Textarea
+                id="edit-description"
+                value={formData.description}
+                onChange={(e) => setFormData(prev => ({ ...prev, description: e.target.value }))}
+                rows={3}
+                disabled={isUpdating}
+              />
+            </div>
+
+            <div className="space-y-2">
+              <Label htmlFor="edit-rate">Rate per Minute (USD)</Label>
+              <Input
+                id="edit-rate"
+                type="number"
+                step="0.01"
+                min="0"
+                value={formData.rate_per_minute}
+                onChange={(e) => setFormData(prev => ({ ...prev, rate_per_minute: e.target.value }))}
+                disabled={isUpdating}
+              />
+            </div>
+          </div>
+
+          <DialogFooter>
+            <Button type="button" variant="outline" onClick={handleClose} disabled={isUpdating}>
+              Cancel
+            </Button>
+            <Button
+              type="submit"
+              disabled={
+                isUpdating || !formData.name.trim() || !formData.description.trim() || isNaN(parseFloat(formData.rate_per_minute))
+              }
+            >
+              {isUpdating ? 'Saving...' : 'Save Changes'}
+            </Button>
+          </DialogFooter>
+        </form>
+      </DialogContent>
+    </Dialog>
+  );
+}
diff -ruN original/scale-vision-dashboard-main/src/contexts/AuthContext.tsx scale-vision-dashboard-main/src/contexts/AuthContext.tsx
--- original/scale-vision-dashboard-main/src/contexts/AuthContext.tsx	2025-10-02 15:52:58.000000000 +0000
+++ scale-vision-dashboard-main/src/contexts/AuthContext.tsx	2025-10-13 02:11:10.422765657 +0000
@@ -2,6 +2,10 @@
 import { User, Session } from '@supabase/supabase-js';
 import { supabase } from '@/integrations/supabase/client';
 
+// Centralized logger for debug messages. Only emits output when
+// VITE_DEBUG_MODE=true. See src/utils/logger.ts for details.
+import { log, warn, error } from '@/utils/logger';
+
 interface Company {
   id: string;
   name: string;
@@ -29,8 +33,22 @@
 const AuthContext = createContext<AuthContextType | undefined>(undefined);
 
 // Super admin configuration
-const SUPER_ADMIN_ID = '53392e76-008c-4e46-8443-a6ebd6bd4504';
-const SUPER_ADMIN_EMAIL = 'aiagentsdevelopers@gmail.com';
+//
+// Rather than hard‑coding super‑admin identifiers directly in the client bundle,
+// we read them from environment variables. This allows you to configure
+// privileged users without changing code or leaking credentials. The variables
+// `VITE_SUPER_ADMIN_IDS` and `VITE_SUPER_ADMIN_EMAILS` should contain
+// comma‑separated lists of user IDs and emails respectively. See
+// docs/ENVIRONMENT_SETUP.md for details.
+const SUPER_ADMIN_IDS: string[] = (import.meta.env.VITE_SUPER_ADMIN_IDS || '')
+  .split(',')
+  .map((id: string) => id.trim())
+  .filter(Boolean);
+
+const SUPER_ADMIN_EMAILS: string[] = (import.meta.env.VITE_SUPER_ADMIN_EMAILS || '')
+  .split(',')
+  .map((email: string) => email.trim())
+  .filter(Boolean);
 
 export function AuthProvider({ children }: { children: React.ReactNode }) {
   const [user, setUser] = useState<User | null>(null);
@@ -43,7 +61,9 @@
   // Check if user is super admin
   const isSuperAdmin = (currentUser: User | null): boolean => {
     if (!currentUser) return false;
-    return currentUser.id === SUPER_ADMIN_ID || currentUser.email === SUPER_ADMIN_EMAIL;
+    const matchId = SUPER_ADMIN_IDS.includes(currentUser.id);
+    const matchEmail = SUPER_ADMIN_EMAILS.includes(currentUser.email ?? '');
+    return matchId || matchEmail;
   };
 
   // Create virtual company for super admin
@@ -61,18 +81,18 @@
   useEffect(() => {
     // Get initial session
     supabase.auth.getSession().then(({ data: { session } }) => {
-      console.log('🔥 [AUTH] Initial session:', !!session);
+      log('🔥 [AUTH] Initial session:', !!session);
       setSession(session);
       setUser(session?.user ?? null);
       
       if (session?.user) {
         if (isSuperAdmin(session.user)) {
-          console.log('🔥 [AUTH] Super admin detected - setting virtual company');
+          log('🔥 [AUTH] Super admin detected - setting virtual company');
           setUserRole('super_admin');
           setCompany(createSuperAdminCompany(session.user.id));
           setLoading(false); // Super admin ready immediately
         } else {
-          console.log('🔥 [AUTH] Regular user, fetching real company...');
+          log('🔥 [AUTH] Regular user, fetching real company...');
           fetchUserCompany(session.user.id);
         }
       } else {
@@ -84,18 +104,18 @@
     const {
       data: { subscription },
     } = supabase.auth.onAuthStateChange((_event, session) => {
-      console.log('🔥 [AUTH] Auth state changed:', _event, !!session);
+      log('🔥 [AUTH] Auth state changed:', _event, !!session);
       setSession(session);
       setUser(session?.user ?? null);
       
       if (session?.user) {
         if (isSuperAdmin(session.user)) {
-          console.log('🔥 [AUTH] Super admin login - setting virtual company');
+          log('🔥 [AUTH] Super admin login - setting virtual company');
           setUserRole('super_admin');
           setCompany(createSuperAdminCompany(session.user.id));
           setLoading(false); // Immediate access for super admin
         } else {
-          console.log('🔥 [AUTH] Regular user login, fetching company...');
+          log('🔥 [AUTH] Regular user login, fetching company...');
           fetchUserCompany(session.user.id);
         }
       } else {
@@ -111,7 +131,7 @@
   const fetchUserCompany = async (userId: string) => {
     try {
       setIsCompanyLoading(true);
-      console.log('🔍 [AUTH] Fetching company for user:', userId);
+      log('🔍 [AUTH] Fetching company for user:', userId);
 
       // First try to find company where user is owner
       let { data: ownerCompany, error: ownerError } = await supabase
@@ -120,17 +140,17 @@
         .eq('owner_id', userId)
         .maybeSingle();
 
-      console.log('🔍 [AUTH] Owner company query result:', { ownerCompany, ownerError });
+      log('🔍 [AUTH] Owner company query result:', { ownerCompany, ownerError });
 
       if (ownerCompany) {
-        console.log('✅ [AUTH] User is company owner');
+        log('✅ [AUTH] User is company owner');
         setCompany(ownerCompany);
         setUserRole('admin');
         return;
       }
 
       // If not owner, check if they're a member
-      console.log('🔍 [AUTH] User is not owner, checking membership...');
+      log('🔍 [AUTH] User is not owner, checking membership...');
       const { data: membership, error: memberError } = await supabase
         .from('company_members')
         .select(`
@@ -149,26 +169,26 @@
         .eq('status', 'active')
         .maybeSingle();
 
-      console.log('🔍 [AUTH] Membership query result:', { membership, memberError });
+      log('🔍 [AUTH] Membership query result:', { membership, memberError });
 
       if (membership && membership.companies) {
         const memberCompany = Array.isArray(membership.companies) 
           ? membership.companies[0] 
           : membership.companies;
         
-        console.log('✅ [AUTH] User is company member, company:', memberCompany);
+        log('✅ [AUTH] User is company member, company:', memberCompany);
         setCompany(memberCompany as Company);
         setUserRole(membership.role || 'member');
         return;
       }
 
       // No crear empresa automáticamente - usuario puede unirse via invitaciones
-console.log('⚠️ [AUTH] No company found - user can join via invitations');
+      warn('⚠️ [AUTH] No company found - user can join via invitations');
 setCompany(null);
 setUserRole('member');
 
     } catch (error) {
-      console.error('❌ [AUTH] Error fetching user company:', error);
+      error('❌ [AUTH] Error fetching user company:', error);
       setCompany(null);
       setUserRole('member');
     } finally {
@@ -220,8 +240,10 @@
     updateUserProfile,
   };
 
-  // Debug: Log del estado del AuthContext
-  console.log('🎯 [AUTH] AuthContext state:', {
+  // Debug: log the current AuthContext state. Useful for development,
+  // but will only emit output when VITE_DEBUG_MODE=true. Remove or
+  // minimise this for production bundles.
+  log('🎯 [AUTH] AuthContext state:', {
     user: user?.id,
     isSuperAdmin: isSuperAdmin(user),
     company: company?.id,
@@ -229,7 +251,7 @@
     userRole,
     loading,
     isCompanyLoading,
-    isCompanyOwner
+    isCompanyOwner,
   });
 
   return <AuthContext.Provider value={value}>{children}</AuthContext.Provider>;
diff -ruN original/scale-vision-dashboard-main/src/hooks/useAgents.tsx scale-vision-dashboard-main/src/hooks/useAgents.tsx
--- original/scale-vision-dashboard-main/src/hooks/useAgents.tsx	2025-10-02 15:52:58.000000000 +0000
+++ scale-vision-dashboard-main/src/hooks/useAgents.tsx	2025-10-13 02:17:21.745935895 +0000
@@ -15,6 +15,9 @@
   removeAgentFromUser
 } from "@/services/agentService";
 
+// Centralized logger for optional debug output
+import { log } from '@/utils/logger';
+
 export function useAgents() {
   const { company, user } = useAuth();
   const { isCompanyOwner, can } = useRole();
@@ -38,13 +41,13 @@
   });
 
   // LOGS DE DEBUG
-  console.log('🔍 [useAgents] Raw allAgents data:', allAgents);
-  console.log('🔍 [useAgents] allAgents length:', allAgents?.length);
-  console.log('🔍 [useAgents] agentsError:', agentsError);
-  console.log('🔍 [useAgents] isLoadingAgents:', isLoadingAgents);
-  console.log('🔍 [useAgents] company?.id:', company?.id);
-  console.log('🔍 [useAgents] isSuperAdmin:', isSuperAdmin);
-  console.log('🔍 [useAgents] Query enabled:', !!company?.id || isSuperAdmin);
+  log('🔍 [useAgents] Raw allAgents data:', allAgents);
+  log('🔍 [useAgents] allAgents length:', allAgents?.length);
+  log('🔍 [useAgents] agentsError:', agentsError);
+  log('🔍 [useAgents] isLoadingAgents:', isLoadingAgents);
+  log('🔍 [useAgents] company?.id:', company?.id);
+  log('🔍 [useAgents] isSuperAdmin:', isSuperAdmin);
+  log('🔍 [useAgents] Query enabled:', !!company?.id || isSuperAdmin);
 
   const {
     data: userAgents,
@@ -54,8 +57,8 @@
   } = useQuery({
     queryKey: ['user-agents', company?.id, isSuperAdmin],
     queryFn: () => {
-      console.log('🔍 [useAgents] Calling fetchUserAgents with company?.id:', company?.id);
-      console.log('🔍 [useAgents] isSuperAdmin:', isSuperAdmin);
+      log('🔍 [useAgents] Calling fetchUserAgents with company?.id:', company?.id);
+      log('🔍 [useAgents] isSuperAdmin:', isSuperAdmin);
       return fetchUserAgents(isSuperAdmin ? undefined : company?.id);
     },
     enabled: !!company?.id || isSuperAdmin,
@@ -63,11 +66,11 @@
     refetchOnWindowFocus: true
   });
 
-  console.log('🔍 [useAgents] userAgents result:', userAgents);
-  console.log('🔍 [useAgents] userAgents length:', userAgents?.length);
-  console.log('🔍 [useAgents] userAgentsError:', userAgentsError);
-  console.log('🔍 [useAgents] company object:', company);
-  console.log('🔍 [useAgents] isLoadingUserAgents:', isLoadingUserAgents);
+  log('🔍 [useAgents] userAgents result:', userAgents);
+  log('🔍 [useAgents] userAgents length:', userAgents?.length);
+  log('🔍 [useAgents] userAgentsError:', userAgentsError);
+  log('🔍 [useAgents] company object:', company);
+  log('🔍 [useAgents] isLoadingUserAgents:', isLoadingUserAgents);
   
   // Filter agents based on user role - super admins see all
   const agents = allAgents ? (isSuperAdmin || isAdmin 
@@ -81,36 +84,36 @@
   ) : [];
 
   // LOG DE DEBUG PARA AGENTS FILTRADOS
-  console.log('🔍 [useAgents] Filtered agents:', agents);
-  console.log('🔍 [useAgents] isAdmin:', isAdmin);
-  console.log('🔍 [useAgents] user?.id:', user?.id);
+  log('🔍 [useAgents] Filtered agents:', agents);
+  log('🔍 [useAgents] isAdmin:', isAdmin);
+  log('🔍 [useAgents] user?.id:', user?.id);
 
   // FUNCIONES CORREGIDAS PARA NOMBRES DE AGENTES
   const getAgentName = (agentId: string): string => {
-    console.log('🔍 [getAgentName] Looking for agent ID:', agentId);
-    console.log('🔍 [getAgentName] Available custom agents:', agents);
-    console.log('🔍 [getAgentName] Raw allAgents for search:', allAgents);
+    log('🔍 [getAgentName] Looking for agent ID:', agentId);
+    log('🔍 [getAgentName] Available custom agents:', agents);
+    log('🔍 [getAgentName] Raw allAgents for search:', allAgents);
     
     // CORREGIDO: Buscar por 'id' en lugar de 'retell_agent_id'
     const agent = agents?.find(a => a.id === agentId);
-    console.log('🔍 [getAgentName] Found custom agent:', agent);
+    log('🔍 [getAgentName] Found custom agent:', agent);
     
     if (agent) {
-      console.log('🎯 [getAgentName] Returning agent name:', agent.name);
+      log('🎯 [getAgentName] Returning agent name:', agent.name);
       return agent.name;
     }
     
     // FALLBACK: Buscar en allAgents sin filtros (por si hay problema de permisos)
     const agentInAll = allAgents?.find(a => a.id === agentId);
-    console.log('🔍 [getAgentName] Found in allAgents (unfiltered):', agentInAll);
+    log('🔍 [getAgentName] Found in allAgents (unfiltered):', agentInAll);
     
     if (agentInAll) {
-      console.log('🎯 [getAgentName] Returning name from allAgents:', agentInAll.name);
+      log('🎯 [getAgentName] Returning name from allAgents:', agentInAll.name);
       return agentInAll.name;
     }
     
     // Fallback para IDs que no están en el sistema
-    console.log('⚠️ [getAgentName] No custom agent found, using fallback');
+    log('⚠️ [getAgentName] No custom agent found, using fallback');
     if (agentId.length > 8) {
       return `Agent ${agentId.substring(0, 8)}`;
     }
@@ -118,7 +121,7 @@
   };
 
   const getAgent = (agentId: string): Agent | undefined => {
-    console.log('🔍 [getAgent] Looking for agent ID:', agentId);
+    log('🔍 [getAgent] Looking for agent ID:', agentId);
     
     // CORREGIDO: Buscar por 'id' primero en agents filtrados
     let agent = agents?.find(agent => agent.id === agentId);
@@ -128,7 +131,7 @@
       agent = allAgents?.find(agent => agent.id === agentId);
     }
     
-    console.log('🔍 [getAgent] Found custom agent:', agent);
+    log('🔍 [getAgent] Found custom agent:', agent);
     return agent;
   };
 
@@ -153,8 +156,8 @@
     
     // Obtener agent_ids únicos de las llamadas
     const uniqueAgentIds = [...new Set(calls.map(call => call.agent_id))];
-    console.log('🔍 [getUniqueAgentsFromCalls] Unique agent IDs from calls:', uniqueAgentIds);
-    console.log('🔍 [getUniqueAgentsFromCalls] Available agents to search in:', agents);
+    log('🔍 [getUniqueAgentsFromCalls] Unique agent IDs from calls:', uniqueAgentIds);
+    log('🔍 [getUniqueAgentsFromCalls] Available agents to search in:', agents);
     
     return uniqueAgentIds
       .map(agentId => {
@@ -166,7 +169,7 @@
           agent = allAgents?.find(a => a.id === agentId);
         }
         
-        console.log(`🔍 [getUniqueAgentsFromCalls] For agent ID ${agentId}, found custom agent:`, agent);
+        log(`🔍 [getUniqueAgentsFromCalls] For agent ID ${agentId}, found custom agent:`, agent);
         
         return {
           id: agentId, // Para el filtro, usamos el agent_id
diff -ruN original/scale-vision-dashboard-main/src/hooks/useSuperAdmin.ts scale-vision-dashboard-main/src/hooks/useSuperAdmin.ts
--- original/scale-vision-dashboard-main/src/hooks/useSuperAdmin.ts	2025-10-02 15:52:58.000000000 +0000
+++ scale-vision-dashboard-main/src/hooks/useSuperAdmin.ts	2025-10-13 02:11:36.534722554 +0000
@@ -2,11 +2,22 @@
 import { useState, useEffect } from 'react'
 import { supabase } from '@/integrations/supabase/client'
 
-// 🚨 SOLUCIÓN: Lista de emails de super admin
-const SUPER_ADMIN_EMAILS = [
-  'aiagentsdevelopers@gmail.com',
-  'produpublicol@gmail.com'
-]
+// Centralized logger: only outputs when VITE_DEBUG_MODE=true.
+import { log, warn, error } from '@/utils/logger'
+
+// Super admin configuration
+//
+// Read super admin identifiers from environment variables rather than
+// hard‑coding them. Accepts comma‑separated lists. See docs/ENVIRONMENT_SETUP.md.
+const SUPER_ADMIN_EMAILS: string[] = (import.meta.env.VITE_SUPER_ADMIN_EMAILS || '')
+  .split(',')
+  .map((email: string) => email.trim())
+  .filter(Boolean)
+
+const SUPER_ADMIN_IDS: string[] = (import.meta.env.VITE_SUPER_ADMIN_IDS || '')
+  .split(',')
+  .map((id: string) => id.trim())
+  .filter(Boolean)
 
 export const useSuperAdmin = () => {
   const [user, setUser] = useState(null)
@@ -16,34 +27,42 @@
   useEffect(() => {
     const getUser = async () => {
       try {
-        const { data: { user }, error } = await supabase.auth.getUser()
-        
-        console.log('🔍 useSuperAdmin - Checking user:', user?.email)
-        console.log('🔍 useSuperAdmin - User metadata:', user?.user_metadata)
-        console.log('🔍 useSuperAdmin - App metadata:', user?.app_metadata)
-        
+        const { data: { user }, error: fetchError } = await supabase.auth.getUser()
+
+        // Debug: log the fetched user and metadata
+        log('🔍 useSuperAdmin - Checking user:', user?.email)
+        log('🔍 useSuperAdmin - User metadata:', user?.user_metadata)
+        log('🔍 useSuperAdmin - App metadata:', user?.app_metadata)
+
         setUser(user)
-        
+
         if (user) {
-          // 🚨 CORREGIR: Usar user_metadata y app_metadata correctamente
+          // Determine super admin status from metadata, email and ID.
           const isSuperFromUserMetadata = user.user_metadata?.role === 'super_admin'
           const isSuperFromAppMetadata = user.app_metadata?.role === 'super_admin'
           const isSuperFromEmail = SUPER_ADMIN_EMAILS.includes(user.email)
-          
-          const finalIsSuper = isSuperFromUserMetadata || isSuperFromAppMetadata || isSuperFromEmail
-          
-          console.log('🔍 useSuperAdmin - From user metadata:', isSuperFromUserMetadata)
-          console.log('🔍 useSuperAdmin - From app metadata:', isSuperFromAppMetadata)
-          console.log('🔍 useSuperAdmin - From email:', isSuperFromEmail)
-          console.log('🔍 useSuperAdmin - Final Result:', finalIsSuper)
-          
+          const isSuperFromId = SUPER_ADMIN_IDS.includes(user.id)
+
+          const finalIsSuper =
+            isSuperFromUserMetadata ||
+            isSuperFromAppMetadata ||
+            isSuperFromEmail ||
+            isSuperFromId
+
+          // Log the decision matrix
+          log('🔍 useSuperAdmin - From user metadata:', isSuperFromUserMetadata)
+          log('🔍 useSuperAdmin - From app metadata:', isSuperFromAppMetadata)
+          log('🔍 useSuperAdmin - From email:', isSuperFromEmail)
+          log('🔍 useSuperAdmin - From id:', isSuperFromId)
+          log('🔍 useSuperAdmin - Final Result:', finalIsSuper)
+
           setIsSuperAdmin(finalIsSuper)
         } else {
-          console.log('🔍 useSuperAdmin - No user')
+          log('🔍 useSuperAdmin - No user')
           setIsSuperAdmin(false)
         }
-      } catch (error) {
-        console.error('🔍 useSuperAdmin - Error:', error)
+      } catch (err) {
+        error('🔍 useSuperAdmin - Error:', err)
         setUser(null)
         setIsSuperAdmin(false)
       } finally {
@@ -56,14 +75,19 @@
     // 🔧 Escuchar cambios de autenticación
     const { data: { subscription } } = supabase.auth.onAuthStateChange(
       (event, session) => {
-        console.log('🔍 useSuperAdmin - Auth change:', event, session?.user?.email)
-        
+        log('🔍 useSuperAdmin - Auth change:', event, session?.user?.email)
+
         if (session?.user) {
           setUser(session.user)
-          const finalIsSuper = 
-            session.user.user_metadata?.role === 'super_admin' ||
-            session.user.app_metadata?.role === 'super_admin' ||
-            SUPER_ADMIN_EMAILS.includes(session.user.email)
+          const isSuperFromUserMetadata = session.user.user_metadata?.role === 'super_admin'
+          const isSuperFromAppMetadata = session.user.app_metadata?.role === 'super_admin'
+          const isSuperFromEmail = SUPER_ADMIN_EMAILS.includes(session.user.email)
+          const isSuperFromId = SUPER_ADMIN_IDS.includes(session.user.id)
+          const finalIsSuper =
+            isSuperFromUserMetadata ||
+            isSuperFromAppMetadata ||
+            isSuperFromEmail ||
+            isSuperFromId
           setIsSuperAdmin(finalIsSuper)
         } else {
           setUser(null)
diff -ruN original/scale-vision-dashboard-main/src/utils/logger.ts scale-vision-dashboard-main/src/utils/logger.ts
--- original/scale-vision-dashboard-main/src/utils/logger.ts	1970-01-01 00:00:00.000000000 +0000
+++ scale-vision-dashboard-main/src/utils/logger.ts	2025-10-13 02:13:06.978535569 +0000
@@ -0,0 +1,52 @@
+// src/utils/logger.ts
+/**
+ * Centralized logging utility for the application.
+ *
+ * Logging in production should be disabled or minimized to avoid
+ * leaking sensitive information and to keep the bundle size small.
+ *
+ * This module exposes helper functions (`log`, `warn`, `error`) that
+ * only emit messages when the `VITE_DEBUG_MODE` environment variable
+ * is set to `'true'`. To enable verbose logging in your local
+ * environment, set `VITE_DEBUG_MODE=true` in your `.env` file. In
+ * production or staging environments, keep this flag `false` so that
+ * logs are suppressed by default.
+ */
+
+const isDebugMode = import.meta.env.VITE_DEBUG_MODE === 'true';
+
+/**
+ * Write a standard log message to the console if debug mode is enabled.
+ *
+ * @param args - Arguments to pass to `console.log`.
+ */
+export function log(...args: unknown[]): void {
+  if (isDebugMode) {
+    // eslint-disable-next-line no-console
+    console.log(...args);
+  }
+}
+
+/**
+ * Write a warning message to the console if debug mode is enabled.
+ *
+ * @param args - Arguments to pass to `console.warn`.
+ */
+export function warn(...args: unknown[]): void {
+  if (isDebugMode) {
+    // eslint-disable-next-line no-console
+    console.warn(...args);
+  }
+}
+
+/**
+ * Write an error message to the console if debug mode is enabled.
+ *
+ * @param args - Arguments to pass to `console.error`.
+ */
+export function error(...args: unknown[]): void {
+  if (isDebugMode) {
+    // eslint-disable-next-line no-console
+    console.error(...args);
+  }
+}
